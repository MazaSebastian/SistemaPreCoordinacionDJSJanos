import emailjs from '@emailjs/browser'

// Configuraci√≥n de EmailJS
const EMAILJS_SERVICE_ID = 'service_qhkyorl'
const EMAILJS_TEMPLATE_ID = 'template_z0p72gf'
const EMAILJS_PUBLIC_KEY = 'kEXeGOz27a_L8PMs7'

// Inicializar EmailJS
emailjs.init(EMAILJS_PUBLIC_KEY)

export const sendPrecoordinacionEmail = async (eventData, userSelections) => {
  try {
    console.log('üìß Enviando email con EmailJS...')
    
    // Formatear los datos para el template
    const templateParams = {
      to_email: 'djsebamaza@gmail.com',
      event_type: eventData.eventType,
      user_selections: JSON.stringify(userSelections, null, 2),
      date: new Date().toLocaleString('es-ES'),
      // Datos espec√≠ficos del evento
      event_details: formatEventDetails(eventData, userSelections),
      // Elementos para mayor prioridad
      subject: `üéµ NUEVA PRECOORDINACI√ìN - ${eventData.eventType} - ${new Date().toLocaleDateString('es-ES')}`,
      priority: 'high',
      importance: 'urgent',
      from_name: 'Sistema Precoordinaci√≥n DJ',
      // Headers adicionales para prioridad
      x_priority: '1',
      x_msmail_priority: 'High',
      reply_to: 'djsebamaza@gmail.com',
      // Contenido destacado
      urgent_flag: 'URGENTE - Nueva Precoordinaci√≥n Recibida',
      event_summary: getEventSummary(eventData, userSelections),
      // Datos estructurados para el template HTML
      event_info: getEventInfo(eventData, userSelections),
      music_selections: getMusicSelections(userSelections),
      special_activities: getSpecialActivities(userSelections),
      contact_info: getContactInfo()
    }

    const result = await emailjs.send(
      EMAILJS_SERVICE_ID,
      EMAILJS_TEMPLATE_ID,
      templateParams
    )

    console.log('‚úÖ Email enviado exitosamente:', result)
    return { success: true, messageId: result.text }
    
  } catch (error) {
    console.error('‚ùå Error enviando email:', error)
    return { success: false, error: error.text || error.message }
  }
}

// Funci√≥n para formatear los detalles del evento exactamente como FinalSummary
const formatEventDetails = (eventData, userSelections) => {
  let details = `Resumen de tu Selecci√≥n Musical\n\n`
  
  // Usar la misma l√≥gica que FinalSummary
  Object.entries(userSelections).forEach(([step, data]) => {
    if (data && typeof data === 'object') {
      Object.entries(data).forEach(([key, value]) => {
        if (value && value !== 'no') {
          const displayKey = formatDisplayKey(key)
          
          // Special handling for candlesList to preserve line breaks
          if (key === 'candlesList' && typeof value === 'string') {
            const lines = value.split('\n').filter(line => line.trim())
            details += `${displayKey}:\n`
            lines.forEach(line => {
              details += `‚Ä¢ ${line.trim()}\n`
            })
            details += '\n'
          } else {
            const displayValue = formatDisplayValue(key, value)
            details += `${displayKey}: ${displayValue}\n`
          }
        }
      })
    }
  })
  
  return details
}

// Funci√≥n para formatear las claves (exactamente igual a FinalSummary)
const formatDisplayKey = (key) => {
  const keyMap = {
    'style': 'Estilo',
    'receptionMusic': 'M√∫sica de Recepci√≥n',
    'receptionSuggestions': 'Sugerencias de Recepci√≥n',
    'dinnerMusic': 'M√∫sica de Cena',
    'dinnerSuggestions': 'Sugerencias de Cena',
    'receptionEntrance': 'Ingreso a Recepci√≥n',
    'receptionEntranceSong': 'Canci√≥n de Ingreso a Recepci√≥n',
    'salonEntranceSong': 'Canci√≥n de Ingreso al Sal√≥n',
    'danceGenres': 'G√©neros para Tandas de Baile',
    'artists': 'Artistas Favoritos',
    'choreography': 'Coreograf√≠a',
    'choreographySong': 'Canci√≥n de Coreograf√≠a',
    'waltzDance': 'Canci√≥n de Vals',
    'waltzSong': 'Canci√≥n de Vals',
    'toastSong': 'Canci√≥n para el Brindis',
    'candlesCeremony': 'Ceremonia de Velas',
    'individualSongs': 'Canciones Individuales por Vela',
    'candlesList': 'Lista de Velas y Canciones',
    'candlesGeneralSong': 'M√∫sica General para Ceremonia de Velas',
    'cariocaEntrance': 'Entrada en Carioca',
    'cariocaEntranceSong': 'Canci√≥n de Entrada en Carioca',
    // Campos espec√≠ficos para Bodas
    'hasCeremony': 'Ceremonia en el Sal√≥n',
    'ceremonySong': 'Canci√≥n para la Ceremonia',
    'ceremonyMusic': 'M√∫sica de Ceremonia',
    'ceremonySpecificSong': 'Canci√≥n Espec√≠fica de Ceremonia',
    'receptionMusic': 'M√∫sica de Recepci√≥n',
    'receptionSuggestions': 'Sugerencias de Recepci√≥n',
    'hasChoreography': 'Coreograf√≠a',
    'choreographySong': 'Canci√≥n para la Coreograf√≠a',
    'hasCarioca': 'Entrada en Carioca',
    'cariocaSong': 'Canci√≥n para la Entrada en Carioca',
    // Campos espec√≠ficos para Cumplea√±os
    'ambientMusic': 'M√∫sica de Ambiente',
    'ambientSuggestions': 'Sugerencias de Ambiente',
    'hasEntrance': 'Ingreso al Sal√≥n',
    'entranceSong': 'Canci√≥n de Ingreso al Sal√≥n',
    'birthdaySong': 'Canci√≥n de Cumplea√±os',
    'hasActivities': 'Actividades Especiales',
    'activities': 'Actividades y M√∫sica',
    'hasCarioca': 'Ingreso en Carioca',
    'cariocaSong': 'Canci√≥n para el Ingreso en Carioca',
    // Campos espec√≠ficos para Corporativos
    'eventType': 'Tipo de Evento Corporativo',
    'ambientMusic': 'M√∫sica de Ambiente General',
    'ambientNotes': 'Notas de Ambiente',
    'networkingMusic': 'M√∫sica para Networking',
    'networkingNotes': 'Notas de Networking',
    'hasPresentations': 'Presentaciones',
    'presentationMusic': 'M√∫sica para Presentaciones',
    'presentationNotes': 'Notas de Presentaciones',
    'hasCoffeeBreak': 'Coffee Break',
    'coffeeBreakMusic': 'M√∫sica para Coffee Break',
    'closingMusic': 'M√∫sica para el Cierre',
    'closingSong': 'Canci√≥n para el Cierre',
    'specificArtists': 'Artistas o Estilos Espec√≠ficos'
  }
  return keyMap[key] || key
}

// Funci√≥n para formatear los valores (exactamente igual a FinalSummary)
const formatDisplayValue = (key, value) => {
  if (key === 'style') {
    const styleMap = {
      // XV A√±os
      'princesa_elegante': 'Princesa y Elegante',
      'moderna_trendy': 'Moderna y Trendy',
      'tematica_especial': 'Tem√°tica Especial',
      // Bodas
      'clasica_elegante': 'Cl√°sica y Elegante',
      'moderna_contemporanea': 'Moderna y Contempor√°nea',
      'rustica_bohemia': 'R√∫stica y Bohemia',
      'tematica_especial': 'Tem√°tica Especial',
      // Cumplea√±os
      'casual_relajado': 'Casual y Relajado',
      'divertido_animado': 'Divertido y Animado',
      'tematico': 'Tem√°tico (disfraces, etc.)',
      'intimo_familiar': '√çntimo y Familiar',
      // Corporativos
      'conferencia': 'Conferencia / Seminario',
      'lanzamiento': 'Lanzamiento de Producto',
      'networking': 'Evento de Networking',
      'gala': 'Gala Corporativa',
      'team_building': 'Team Building',
      'premios': 'Ceremonia de Premios',
      'fiesta_empresa': 'Fiesta de Empresa'
    }
    return styleMap[value] || value
  }
  if (key === 'receptionMusic' || key === 'dinnerMusic' || key === 'ambientMusic') {
    const musicMap = {
      'ambiental': 'M√∫sica Ambiental',
      'pop': 'Pop',
      'pop_actual': 'Pop Actual',
      'jazz': 'Jazz',
      'lounge': 'Lounge',
      'acusticos': 'Ac√∫sticos',
      'rock_nacional': 'Rock Nacional',
      'rock': 'Rock',
      'rock_alternativo': 'Rock/Alternativo',
      'bossa': 'Bossa',
      'retro_vintage': 'Retro/Vintage',
      'latin_reggeaton': 'Latino/Reggaeton',
      'electronica': 'M√∫sica Electr√≥nica',
      'mixto_variado': 'Mixto y Variado',
      // Corporativos
      'instrumental': 'M√∫sica Instrumental',
      'jazz_lounge': 'Jazz / Lounge',
      'ambient_electronic': 'Ambient / Electr√≥nica Suave',
      'classical': 'M√∫sica Cl√°sica',
      'world_music': 'World Music',
      'corporate_playlist': 'Playlist Corporativa Est√°ndar'
    }
    return musicMap[value] || value
  }
  if (key === 'choreography' || key === 'hasCeremony' || key === 'hasChoreography' || key === 'hasCarioca' || key === 'hasActivities' || key === 'hasEntrance' || key === 'hasPresentations' || key === 'hasCoffeeBreak') {
    return value === 'si' ? 'S√≠' : 'No'
  }
  if (key === 'ceremonyMusic') {
    const ceremonyMap = {
      'clasica': 'M√∫sica Cl√°sica',
      'religiosa': 'M√∫sica Religiosa',
      'contemporanea': 'M√∫sica Contempor√°nea',
      'instrumental': 'Instrumental'
    }
    return ceremonyMap[value] || value
  }
  if (key === 'networkingMusic') {
    const networkingMap = {
      'conversational': 'M√∫sica Conversacional (volumen bajo)',
      'energetic': 'M√∫sica Energ√©tica (para motivar)',
      'sophisticated': 'M√∫sica Sofisticada',
      'international': 'M√∫sica Internacional',
      'local_artists': 'Artistas Locales',
      'no_music': 'Sin m√∫sica (solo conversaci√≥n)'
    }
    return networkingMap[value] || value
  }
  if (key === 'presentationMusic') {
    const presentationMap = {
      'minimal': 'M√∫sica M√≠nima / Ambiental',
      'corporate': 'M√∫sica Corporativa Est√°ndar',
      'inspiring': 'M√∫sica Inspiracional',
      'tech': 'M√∫sica Tecnol√≥gica / Moderna',
      'custom': 'M√∫sica Personalizada'
    }
    return presentationMap[value] || value
  }
  if (key === 'coffeeBreakMusic') {
    const coffeeMap = {
      'relaxing': 'M√∫sica Relajante',
      'jazz': 'Jazz Suave',
      'acoustic': 'M√∫sica Ac√∫stica',
      'instrumental': 'Instrumental',
      'no_music': 'Sin m√∫sica'
    }
    return coffeeMap[value] || value
  }
  if (key === 'closingMusic') {
    const closingMap = {
      'inspiring': 'M√∫sica Inspiracional',
      'celebratory': 'M√∫sica de Celebraci√≥n',
      'professional': 'M√∫sica Profesional',
      'thank_you': 'M√∫sica de Agradecimiento',
      'corporate_anthem': 'Himno Corporativo',
      'no_music': 'Sin m√∫sica'
    }
    return closingMap[value] || value
  }
  if (key === 'receptionMusic') {
    const receptionMap = {
      'ambiental': 'M√∫sica Ambiental',
      'pop': 'Pop',
      'jazz': 'Jazz',
      'lounge': 'Lounge',
      'acusticos': 'Ac√∫sticos'
    }
    return receptionMap[value] || value
  }
  if (key === 'danceGenres' && Array.isArray(value)) {
    return value.join(', ')
  }
  if (key === 'candlesList' && typeof value === 'string') {
    return value.split('\n').filter(line => line.trim()).map(line => `‚Ä¢ ${line.trim()}`).join('\n')
  }
  return value
}

// Funci√≥n para crear un resumen destacado del evento
const getEventSummary = (eventData, userSelections) => {
  let summary = `üéâ NUEVA PRECOORDINACI√ìN RECIBIDA\n\n`
  summary += `üìÖ Fecha: ${new Date().toLocaleDateString('es-ES')}\n`
  summary += `‚è∞ Hora: ${new Date().toLocaleTimeString('es-ES')}\n`
  summary += `üéµ Tipo de Evento: ${eventData.eventType}\n\n`
  
  // Destacar informaci√≥n clave
  const keyInfo = []
  Object.entries(userSelections).forEach(([step, data]) => {
    if (data && Object.keys(data).length > 0) {
      Object.entries(data).forEach(([key, value]) => {
        if (value && value !== '' && typeof value === 'string') {
          if (key.includes('Song') || key.includes('Music') || key.includes('artists')) {
            keyInfo.push(`‚Ä¢ ${formatDisplayKey(key)}: ${value}`)
          }
        }
      })
    }
  })
  
  if (keyInfo.length > 0) {
    summary += `üéØ INFORMACI√ìN CLAVE:\n${keyInfo.slice(0, 5).join('\n')}\n\n`
  }
  
  summary += `üìß Este email fue generado autom√°ticamente por el Sistema de Precoordinaci√≥n DJ`
  
  return summary
}

// Funci√≥n para obtener informaci√≥n estructurada del evento
const getEventInfo = (eventData, userSelections) => {
  const info = {
    type: eventData.eventType,
    date: new Date().toLocaleDateString('es-ES'),
    time: new Date().toLocaleTimeString('es-ES'),
    style: userSelections[1]?.style || 'No especificado'
  }
  return JSON.stringify(info, null, 2)
}

// Funci√≥n para obtener selecciones musicales estructuradas
const getMusicSelections = (userSelections) => {
  const music = {
    reception: userSelections[2]?.receptionMusic || userSelections[2]?.ambientMusic,
    dinner: userSelections[2]?.dinnerMusic,
    entrance: userSelections[4]?.salonEntranceSong || userSelections[3]?.entranceSong,
    dance_genres: userSelections[5]?.danceGenres || [],
    artists: userSelections[6]?.artists || [],
    waltz: userSelections[8]?.waltzSong || userSelections[7]?.waltzSong,
    toast: userSelections[9]?.toastSong || userSelections[8]?.toastSong,
    birthday: userSelections[4]?.birthdaySong,
    networking: userSelections[3]?.networkingMusic,
    presentation: userSelections[4]?.presentationMusic,
    coffee_break: userSelections[5]?.coffeeBreakMusic,
    closing: userSelections[6]?.closingMusic
  }
  return JSON.stringify(music, null, 2)
}

// Funci√≥n para obtener actividades especiales
const getSpecialActivities = (userSelections) => {
  const activities = {
    choreography: {
      has: userSelections[7]?.choreography || userSelections[9]?.hasChoreography,
      song: userSelections[7]?.choreographySong || userSelections[9]?.choreographySong
    },
    carioca: {
      has: userSelections[11]?.cariocaEntrance || userSelections[10]?.hasCarioca || userSelections[8]?.hasCarioca,
      song: userSelections[11]?.cariocaEntranceSong || userSelections[10]?.cariocaSong || userSelections[8]?.cariocaSong
    },
    candles: {
      has: userSelections[10]?.candlesCeremony,
      individual: userSelections[10]?.individualSongs,
      list: userSelections[10]?.candlesList
    },
    ceremony: {
      has: userSelections[3]?.hasCeremony,
      song: userSelections[3]?.ceremonySong
    },
    activities: {
      has: userSelections[7]?.hasActivities,
      description: userSelections[7]?.activities
    }
  }
  return JSON.stringify(activities, null, 2)
}

// Funci√≥n para obtener informaci√≥n de contacto
const getContactInfo = () => {
  return JSON.stringify({
    system: 'Sistema de Precoordinaci√≥n Musical',
    dj: 'DJ Seba Maza',
    email: 'djsebamaza@gmail.com',
    generated_at: new Date().toISOString()
  }, null, 2)
}
